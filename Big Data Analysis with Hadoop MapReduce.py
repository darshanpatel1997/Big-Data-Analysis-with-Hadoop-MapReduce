# -*- coding: utf-8 -*-
"""hpci resit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17pqw6mJgCLU6hxjXc7H55DZyALlNh9cS

Download hadoop in the virtual Linux machine allocated by Google Colab
"""

!wget https://downloads.apache.org/hadoop/common/hadoop-3.3.6/hadoop-3.3.6.tar.gz

"""The file we downloaded is an archive, so we need to extract the files"""

!tar -xzf hadoop-3.3.6.tar.gz

"""copying the hadoop libraries to /usr/local"""

!cp -r hadoop-3.3.6 /usr/local

"""Java is used to write Hadoop. We need the Java SDK in order to make it operate. Fortunately, Java is already installed when Google Colab is used; all we need to do is find its location.

"""

!readlink -f /usr/bin/java | sed "s:bin/java::"

"""to set up the previously mentioned path as the value for the Java path variable. On a typical Linux system, the command EXPORT would accomplish this. Once more, due to the unique configuration of the Google Colab virtual machine, we must use Python to set this global variable.

"""

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64/"

"""Test if the global JAVA_HOME variable is set to the right path:"""

!echo $JAVA_HOME

"""Now let's add some data to the PATH global variable. When a command is executed in Linux, the PATH variable is an environment variable that holds an ordered list of paths where executables can be found. We can run commands without having to specify an absolute path if we use these paths.

In order to avoid having to write out the whole path of the Hadoop program we wish to run each time, we will add our Hadoop libraries to this PATH variable.

"""

import os
os.environ['PATH'] += ':/usr/local/hadoop-3.3.6/bin'

!hadoop jar /usr/local/hadoop-3.3.6/share/hadoop/tools/lib/hadoop-streaming-3.3.6.jar  -files /content/Mapper_Director.py,/content/Reducer_director.py -input /content/imdb_top_1000.csv -output /content/output/Test_Director -mapper 'python Mapper_Director.py'  -reducer 'python Reducer_director.py'

!hadoop jar /usr/local/hadoop-3.3.6/share/hadoop/tools/lib/hadoop-streaming-3.3.6.jar  -files /content/Mapper_Actor.py,/content/Reducer_Actor.py -input /content/imdb_top_1000.csv -output /content/output/Test_Actor -mapper 'python Mapper_Actor.py'  -reducer 'python Reducer_Actor.py'

!hdfs dfs -cat /content/output/Test_Director//part-00000

!hdfs dfs -cat /content/output/Test_Actor//part-00000

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def parse_gross(gross_str):
    if gross_str:
        return float(gross_str.replace(',', ''))
    return 0

# Read the data from the file
file_path = '/content/output/Test_Director//part-00000'

data = []
with open(file_path, 'r') as file:
    for line in file:
        try:
            parts = line.strip().split('\t')
            if len(parts) == 3:
                director, imdb_rating, gross = parts
                imdb_rating = float(imdb_rating)
                gross = parse_gross(gross)
                data.append((director, imdb_rating, gross))
        except Exception as e:
            continue

# Create a DataFrame
df = pd.DataFrame(data, columns=["Director", "Avg_IMDB_Rating", "Avg_Gross"])

# Calculate average values for each director
df_avg = df.groupby("Director").mean().reset_index()

# Top 10 directors by average IMDB rating
top_10_imdb = df_avg.nlargest(10, 'Avg_IMDB_Rating')

# Top 10 directors by average gross earnings
top_10_gross = df_avg.nlargest(10, 'Avg_Gross')

# Set the style
sns.set(style="whitegrid")

# Plotting
fig, axes = plt.subplots(1, 2, figsize=(18, 8))

# Top 10 IMDB Ratings
sns.barplot(x="Avg_IMDB_Rating", y="Director", hue="Director", data=top_10_imdb, ax=axes[0], palette="Blues_d", dodge=False, legend=False)
axes[0].set_xlabel('Average IMDB Rating')
axes[0].set_title('Top 10 Directors by Average IMDB Rating')
axes[0].set_xlim(7.5, 10)  # Adjust x-axis limit for better visual comparison

# Top 10 Gross Earnings
sns.barplot(x="Avg_Gross", y="Director", hue="Director", data=top_10_gross, ax=axes[1], palette="Greens_d", dodge=False, legend=False)
axes[1].set_xlabel('Average Gross Earnings ($)')
axes[1].set_title('Top 10 Directors by Average Gross Earnings')

# Formatting the plots
for ax in axes:
    for label in ax.get_yticklabels():
        label.set_fontsize(12)
        label.set_fontweight('bold')
    for label in ax.get_xticklabels():
        label.set_fontsize(10)
    ax.set_ylabel('')

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def parse_gross(gross_str):
    if gross_str:
        return float(gross_str.replace(',', ''))
    return 0

# Read the data from the file
file_path = '/content/output/Test_Actor//part-00000'

data = []
with open(file_path, 'r') as file:
    for line in file:
        try:
            parts = line.strip().split('\t')
            if len(parts) == 3:
                actor, imdb_rating, gross = parts
                imdb_rating = float(imdb_rating)
                gross = parse_gross(gross)
                data.append((actor, imdb_rating, gross))
        except Exception as e:
            continue

# Create a DataFrame
df = pd.DataFrame(data, columns=["Actor", "Avg_IMDB_Rating", "Avg_Gross"])

# Calculate average values for each actor
df_avg = df.groupby("Actor").mean().reset_index()

# Top 20 actors by average IMDB rating
top_20_imdb = df_avg.nlargest(20, 'Avg_IMDB_Rating')

# Top 20 actors by average gross earnings
top_20_gross = df_avg.nlargest(20, 'Avg_Gross')

# Set the style
sns.set(style="whitegrid")

# Plotting
fig, axes = plt.subplots(2, 1, figsize=(18, 16))

# Top 20 IMDB Ratings
sns.barplot(x="Avg_IMDB_Rating", y="Actor", hue="Actor", data=top_20_imdb, ax=axes[0], palette="Blues_d", dodge=False, legend=False)
axes[0].set_xlabel('Average IMDB Rating')
axes[0].set_title('Top 20 Actors by Average IMDB Rating')
axes[0].set_xlim(7.5, 10)  # Adjust x-axis limit for better visual comparison

# Top 20 Gross Earnings
sns.barplot(x="Avg_Gross", y="Actor", hue="Actor", data=top_20_gross, ax=axes[1], palette="Greens_d", dodge=False, legend=False)
axes[1].set_xlabel('Average Gross Earnings ($)')
axes[1].set_title('Top 20 Actors by Average Gross Earnings')

# Formatting the plots
for ax in axes:
    for label in ax.get_yticklabels():
        label.set_fontsize(12)
        label.set_fontweight('bold')
    for label in ax.get_xticklabels():
        label.set_fontsize(10)
    ax.set_ylabel('')

plt.tight_layout()
plt.show()